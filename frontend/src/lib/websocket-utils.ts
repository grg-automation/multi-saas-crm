// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket –∏ –ø–æ–ª—É—á–µ–Ω–∏—è sessionId

interface TelegramSession {
  id: string;
  phoneNumber: string;
  userId: string;
  isAuthenticated: boolean;
  isConnected: boolean;
  lastActivity: string;
}

interface SessionsResponse {
  success: boolean;
  sessions: TelegramSession[];
  count: number;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç userId –∏–∑ threadId
 * @param threadId - ID —Ç—Ä–µ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "telegram_thread_5032442070")
 * @returns userId –∏–ª–∏ null
 */
export function extractUserIdFromThreadId(threadId: string): string | null {
  const match = threadId.match(/telegram_thread_(\d+)/);
  return match ? match[1] : null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç sessionId –ø–æ threadId —á–µ—Ä–µ–∑ API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ —á–∞—Ç–∞–º–∏
 * @param threadId - ID —Ç—Ä–µ–¥–∞
 * @returns sessionId –∏–ª–∏ null
 */
export async function getSessionIdByThreadId(threadId: string): Promise<string | null> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ threadId
    const userId = extractUserIdFromThreadId(threadId);
    if (!userId) {
      console.warn('Cannot extract userId from threadId:', threadId);
      return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const response = await fetch('http://localhost:3003/api/v1/telegram-user-v2/sessions');
    if (!response.ok) {
      console.error('Failed to fetch Telegram sessions:', response.status);
      return null;
    }

    const data: SessionsResponse = await response.json();
    
    // –ë–µ—Ä–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    // –û–¥–Ω–∞ —Å–µ—Å—Å–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Å–µ–º–∏ —á–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–ª–∏–Ω–≥
    const session = data.sessions.find(s => s.isAuthenticated && s.isConnected);
    
    if (session) {
      console.log(`üìç Using active session for threadId ${threadId}:`, session.id);
      return session.id;
    } else {
      console.warn(`No active sessions available for threadId: ${threadId}`);
      return null;
    }
  } catch (error) {
    console.error('Error getting sessionId by threadId:', error);
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ threadId Telegram —Ç—Ä–µ–¥–æ–º
 * @param threadId - ID —Ç—Ä–µ–¥–∞
 * @returns boolean
 */
export function isTelegramThread(threadId: string): boolean {
  return threadId.startsWith('telegram_thread_');
}