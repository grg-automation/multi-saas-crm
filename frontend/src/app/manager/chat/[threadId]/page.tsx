'use client'

import { useState, useEffect, useRef } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { io, Socket } from 'socket.io-client'
import { ArrowLeft, Send, MessageCircle, Clock, Upload, Download } from 'lucide-react'
import AuthenticatedLayout from '@/components/layout/AuthenticatedLayout'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'

export default function ManagerChatPage() {
  const router = useRouter()
  const params = useParams()
  const threadId = params.threadId as string
  
  const [messages, setMessages] = useState<any[]>([])
  const [newMessage, setNewMessage] = useState('')
  const [loading, setLoading] = useState(true)
  const [chatInfo, setChatInfo] = useState<any>(null)
  const [sending, setSending] = useState(false)
  const [uploading, setUploading] = useState(false)
  const socketRef = useRef<Socket | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    if (threadId) {
      fetchChatData()
      setupWebSocket()
    }

    // Cleanup WebSocket connection
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect()
        socketRef.current = null
      }
    }
  }, [threadId])

  const setupWebSocket = () => {
    try {
      const userData = localStorage.getItem('user')
      const user = userData ? JSON.parse(userData) : null

      if (!user) {
        console.error('No user data found for WebSocket connection')
        return
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      socketRef.current = io('http://localhost:3003', {
        timeout: 20000,
        transports: ['websocket', 'polling']
      })

      socketRef.current.on('connect', () => {
        console.log('WebSocket connected for manager chat')
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        const sessionId = 'tg_user_1754039348073_xnqhblt8r' // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—Ä–∞—Ç—å—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const chatId = threadId.replace('telegram_thread_', '') // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π chat ID
        socketRef.current?.emit('subscribe_to_session', {
          sessionId: sessionId,
          userId: user.id,
          userRole: 'MANAGER',
          assignedChatIds: [chatId] // –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å—Ç—ã–µ chat ID –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        })
      })

      socketRef.current.on('subscription_confirmed', (data) => {
        console.log('WebSocket subscription confirmed:', data)
      })

      socketRef.current.on('telegram_update', (update) => {
        console.log('Received Telegram update:', update)
        console.log('üîç Update data structure:', {
          type: update.type,
          chatId: update.chatId,
          data: update.data,
          hasMedia: !!update.data?.media,
          mediaType: update.data?.media?.type,
          text: update.data?.text,
          message: update.data?.message
        })
        
        if (update.type === 'new_message' && update.chatId === threadId.replace('telegram_thread_', '')) {
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–∞–º–∏
          const detectMessageType = (updateData: any) => {
            if (updateData.media) {
              if (updateData.media.photo || updateData.media.type === 'MessageMediaPhoto') return 'image'
              if (updateData.media.document || updateData.media.type === 'MessageMediaDocument') return 'file'
            }
            return 'text'
          }

          const processFileContent = (updateData: any, messageType: string) => {
            let content = updateData.text || updateData.message || ''
            
            if (messageType === 'file' && updateData.media?.document) {
              const document = updateData.media.document
              let fileName = '–î–æ–∫—É–º–µ–Ω—Ç'
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
              if (document.attributes) {
                for (const attr of document.attributes) {
                  if (attr.fileName || (attr.className && attr.className.includes('DocumentAttributeFilename'))) {
                    fileName = attr.fileName || attr.file_name || fileName
                    break
                  }
                }
              }
              
              // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º content –∫–∞–∫ fallback
              if (fileName === '–î–æ–∫—É–º–µ–Ω—Ç' && content) {
                fileName = content
              }
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ MIME —Ç–∏–ø—É
              const mimeType = document.mimeType || document.mime_type || ''
              let icon = 'üìÑ'
              if (mimeType.startsWith('image/')) {
                icon = 'üñºÔ∏è'
              } else if (mimeType.startsWith('video/')) {
                icon = 'üé•'
              } else if (mimeType.startsWith('audio/')) {
                icon = 'üéß'
              }
              
              return `${icon} ${fileName}`
            } else if (messageType === 'image') {
              return content ? `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n${content}` : 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            } else if (!content && updateData.media) {
              return '[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]'
            }
            
            return content
          }

          const messageType = detectMessageType(update.data)
          const processedContent = processFileContent(update.data, messageType)

          const newMsg = {
            id: update.data.messageId?.toString() || Date.now().toString(),
            content: processedContent,
            timestamp: update.data.date || new Date().toISOString(),
            sender: update.data.isOutgoing || update.data.fromManager ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : '–ö–æ–Ω—Ç–∞–∫—Ç',
            isFromManager: update.data.isOutgoing || update.data.fromManager || false,
            messageType: messageType
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º ID (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
          setMessages(prev => {
            const exists = prev.some(msg => msg.id === newMsg.id)
            if (exists) {
              console.log('Message already exists, skipping:', newMsg.id)
              return prev
            }
            console.log('Adding new message with type:', messageType, 'content:', processedContent)
            return [...prev, newMsg]
          })
        }
      })

      socketRef.current.on('disconnect', () => {
        console.log('WebSocket disconnected')
      })

      socketRef.current.on('error', (error) => {
        console.error('WebSocket error:', error)
      })

    } catch (error) {
      console.error('Failed to setup WebSocket:', error)
    }
  }

  const fetchChatData = async () => {
    try {
      setLoading(true)
      const token = localStorage.getItem('token')
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      const chatResponse = await fetch(`http://localhost:3003/api/v1/manager/chat/${threadId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (chatResponse.ok) {
        const chatData = await chatResponse.json()
        setChatInfo(chatData.data)
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) - –∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      const messagesResponse = await fetch(`http://localhost:3003/api/v1/manager/chat/${threadId}/messages?limit=200`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (messagesResponse.ok) {
        const messagesData = await messagesResponse.json()
        const anonymizedMessages = messagesData.data?.map((msg: any) => ({
          id: msg.id,
          content: msg.content,
          timestamp: msg.timestamp,
          sender: msg.sender,
          isFromManager: msg.isFromManager,
          messageType: msg.messageType
        })) || []
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É)
        const sortedMessages = anonymizedMessages.sort((a, b) => 
          new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
        )
        
        setMessages(sortedMessages)
      }
      
    } catch (error) {
      console.error('Error fetching chat data:', error)
    } finally {
      setLoading(false)
    }
  }

  const sendMessage = async () => {
    if (!newMessage.trim() || sending) return
    
    try {
      setSending(true)
      const token = localStorage.getItem('token')
      const userData = localStorage.getItem('user')
      const managerId = userData ? JSON.parse(userData).id : undefined
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ API
      const response = await fetch(`http://localhost:3003/api/v1/manager/chat/${threadId}/send`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: newMessage,
          messageType: 'text',
          managerId: managerId
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ (WebSocket –º–æ–∂–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º)
        const newMsg = {
          id: result.data.messageId,
          content: newMessage,
          timestamp: result.data.sentAt,
          sender: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
          isFromManager: true,
          messageType: 'text'
        }
        
        setMessages(prev => {
          const exists = prev.some(msg => msg.id === newMsg.id)
          if (exists) {
            console.log('Sent message already exists, skipping:', newMsg.id)
            return prev
          }
          return [...prev, newMsg]
        })
        setNewMessage('')
      } else {
        console.error('Failed to send message')
      }
      
    } catch (error) {
      console.error('Error sending message:', error)
    } finally {
      setSending(false)
    }
  }

  const sendFile = async (file: File) => {
    if (!file || uploading) return
    
    try {
      setUploading(true)
      const token = localStorage.getItem('token')
      const userData = localStorage.getItem('user')
      const managerId = userData ? JSON.parse(userData).id : undefined

      const formData = new FormData()
      formData.append('file', file)
      formData.append('managerId', managerId || '')

      const response = await fetch(`http://localhost:3003/api/v1/manager/chat/${threadId}/send-file`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData
      })

      if (response.ok) {
        const result = await response.json()
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ (WebSocket –º–æ–∂–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º)
        const newMsg = {
          id: result.data.messageId,
          content: `üìé ${file.name}`,
          timestamp: result.data.sentAt,
          sender: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
          isFromManager: true,
          messageType: 'file'
        }
        
        setMessages(prev => {
          const exists = prev.some(msg => msg.id === newMsg.id)
          if (exists) {
            console.log('Sent file already exists, skipping:', newMsg.id)
            return prev
          }
          return [...prev, newMsg]
        })
      } else {
        console.error('Failed to send file')
      }
      
    } catch (error) {
      console.error('Error sending file:', error)
    } finally {
      setUploading(false)
    }
  }

  const handleDownloadFile = async (messageId: string, fileName?: string) => {
    try {
      console.log(`üì• Starting download for message: ${messageId}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º chatId –∏–∑ threadId –¥–ª—è Telegram
      let chatId: string | undefined;
      if (threadId && threadId.startsWith('telegram_thread_')) {
        // threadId –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç telegram_thread_925339638
        const match = threadId.match(/telegram_thread_(\d+)/);
        if (match) {
          chatId = match[1];
          console.log(`üì• Extracted chatId: ${chatId} from threadId: ${threadId}`);
        }
      }

      if (!chatId) {
        throw new Error('Cannot determine chatId for file download');
      }
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const { downloadTelegramFile } = await import('@/lib/telegram-inbox-api');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const fileData = await downloadTelegramFile(messageId, chatId);
      
      // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö
      const binaryString = atob(fileData.data);
      const bytes = new Uint8Array(binaryString.length);
      for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
      }
      
      const blob = new Blob([bytes], { type: fileData.contentType });
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = fileName || fileData.fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      console.log(`‚úÖ File downloaded: ${fileData.fileName}`);
    } catch (error) {
      console.error('Failed to download file:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      sendFile(file)
    }
    // –û—á–∏—â–∞–µ–º input –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp)
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  if (loading) {
    return (
      <AuthenticatedLayout>
        <div className="p-6">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <MessageCircle className="h-8 w-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</p>
            </div>
          </div>
        </div>
      </AuthenticatedLayout>
    )
  }

  return (
    <AuthenticatedLayout>
      <div className="p-6 max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
        <div className="flex items-center gap-4 mb-6">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => router.back()}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥ –∫ —á–∞—Ç–∞–º
          </Button>
          
          <div className="flex-1">
            <h1 className="text-2xl font-bold">{chatInfo?.title}</h1>
            <div className="flex items-center gap-4 text-sm text-gray-600 mt-1">
              <span>{chatInfo?.contact}</span>
              <Badge variant="outline">{chatInfo?.channel}</Badge>
              <Badge variant="secondary">{chatInfo?.status}</Badge>
            </div>
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <Card className="mb-4">
          <CardContent className="p-0">
            <div className="h-96 overflow-y-auto p-4 space-y-4">
              {messages.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <MessageCircle className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                  <p>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ</p>
                </div>
              ) : (
                messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.isFromManager ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg relative group ${
                        message.isFromManager
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-100 text-gray-900'
                      }`}
                    >
                      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */}
                      <div className="flex items-start justify-between">
                        <p className="text-sm flex-1">{message.content}</p>
                        
                        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ */}
                        {(message.messageType === 'file' || 
                          message.messageType === 'image' ||
                          message.content.includes('üìé') || 
                          message.content.includes('üñºÔ∏è') || 
                          message.content.includes('üé•') || 
                          message.content.includes('üéß') || 
                          message.content.includes('üìÑ')) && (
                          <button
                            onClick={() => {
                              const fileName = message.content.replace(/^üìé\s*/, '').replace(/^üñºÔ∏è\s*/, '').replace(/^üé•\s*/, '').replace(/^üéß\s*/, '').replace(/^üìÑ\s*/, '')
                              handleDownloadFile(message.id, fileName)
                            }}
                            className={`ml-2 p-1 rounded opacity-0 group-hover:opacity-100 transition-opacity ${
                              message.isFromManager 
                                ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                                : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                            }`}
                            title="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"
                          >
                            <Download className="h-3 w-3" />
                          </button>
                        )}
                      </div>
                      
                      <div className="flex items-center justify-between mt-1">
                        <span className={`text-xs ${
                          message.isFromManager ? 'text-blue-100' : 'text-gray-500'
                        }`}>
                          {message.sender}
                        </span>
                        <span className={`text-xs ${
                          message.isFromManager ? 'text-blue-100' : 'text-gray-500'
                        }`}>
                          {formatTime(message.timestamp)}
                        </span>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
        <Card>
          <CardContent className="p-4">
            <div className="flex gap-2">
              <Input
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                disabled={sending || uploading}
              />
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileSelect}
                style={{ display: 'none' }}
                accept="*/*"
              />
              <Button
                variant="outline"
                onClick={() => fileInputRef.current?.click()}
                disabled={uploading}
                title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
              >
                {uploading ? (
                  <Clock className="h-4 w-4" />
                ) : (
                  <Upload className="h-4 w-4" />
                )}
              </Button>
              <Button 
                onClick={sendMessage} 
                disabled={!newMessage.trim() || sending || uploading}
              >
                {sending ? (
                  <Clock className="h-4 w-4" />
                ) : (
                  <Send className="h-4 w-4" />
                )}
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ */}
        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
          <p className="text-sm text-yellow-800">
            üîí <strong>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. 
            –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã.
          </p>
        </div>
      </div>
    </AuthenticatedLayout>
  )
}