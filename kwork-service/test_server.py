#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è kwork-service –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import uvicorn
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Kwork Service Test",
    description="–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Kwork –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "Kwork Service Test Server is running", 
        "docs": "/docs",
        "status": "ready"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy", 
        "timestamp": time.time(),
        "service": "kwork-service-test"
    }

@app.get("/api/v1/test")
async def test_endpoint():
    return {
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "endpoints": [
            "/api/v1/auth",
            "/api/v1/accounts", 
            "/api/v1/orders",
            "/api/v1/chat",
            "/api/v1/gigs",
            "/api/v1/crm-sync"
        ]
    }

@app.get("/api/v1/auth/test")
async def auth_test():
    return {
        "message": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready"
    }

@app.get("/api/v1/orders/test")
async def orders_test():
    return {
        "message": "–ó–∞–∫–∞–∑—ã API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready",
        "note": "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω—É–∂–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Kwork"
    }

@app.get("/api/v1/accounts/test")
async def accounts_test():
    return {
        "message": "–ê–∫–∫–∞—É–Ω—Ç—ã API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready"
    }

@app.get("/api/v1/chat/test")
async def chat_test():
    return {
        "message": "–ß–∞—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready"
    }

@app.get("/api/v1/gigs/test")
async def gigs_test():
    return {
        "message": "–ö–≤–æ—Ä–∫–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready"
    }

@app.get("/api/v1/crm-sync/test")
async def crm_sync_test():
    return {
        "message": "CRM —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "ready",
        "note": "–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–∞ CRM —Å–∏—Å—Ç–µ–º–∞"
    }

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    logger.info(f"Request: {request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s")
    
    return response

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Kwork Service...")
    print("üìç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("üîç Health check: http://localhost:8000/health")
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ endpoints: http://localhost:8000/api/v1/test")
    
    uvicorn.run(
        "test_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 