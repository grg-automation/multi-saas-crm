#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Kwork Hub
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ Kwork
"""

import requests
import json
import time
import os
from typing import Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class KworkHubTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = self.session.get(f"{self.base_url}/")
            if response.status_code == 200:
                print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç health check"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Health check: {data['status']}")
                return True
            else:
                print(f"‚ùå Health check failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Health check error: {e}")
            return False
    
    def test_docs(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            response = self.session.get(f"{self.base_url}/docs")
            if response.status_code == 200:
                print("‚úÖ Swagger docs –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                print(f"‚ùå Swagger docs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Docs error: {e}")
            return False
    
    def test_forbidden_routes(self) -> bool:
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        forbidden_routes = ["/settings", "/payment", "/finance", "/balance"]
        
        print("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        all_blocked = True
        
        for route in forbidden_routes:
            try:
                response = self.session.get(f"{self.base_url}{route}")
                if response.status_code == 403:
                    print(f"‚úÖ {route} - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    print(f"‚ùå {route} - –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ({response.status_code})")
                    all_blocked = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {route}: {e}")
                all_blocked = False
        
        return all_blocked
    
    def register_test_user(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            "username": f"testuser_{int(time.time())}",
            "email": f"test_{int(time.time())}@example.com",
            "password": "testpassword123"
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/auth/register",
                json=user_data
            )
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                self.test_user = user_data
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
                print(f"Response: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def login_test_user(self) -> bool:
        """–í—Ö–æ–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not hasattr(self, 'test_user'):
            print("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞")
            return False
        
        login_data = {
            "username": self.test_user["username"],
            "password": self.test_user["password"]
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/auth/login",
                json=login_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["access_token"]
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
                print(f"Response: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            return False
    
    def test_protected_endpoint(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/auth/me")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['username']}")
                return True
            else:
                print(f"‚ùå –ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint: {e}")
            return False
    
    def test_add_kwork_account(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Kwork –∞–∫–∫–∞—É–Ω—Ç–∞"""
        account_data = {
            "login": "test_kwork_user",
            "password": "test_kwork_password",
            "account_name": "Test Kwork Account"
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/accounts",
                json=account_data
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Kwork –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {data['account_name']}")
                self.account_id = data['id']
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {response.status_code}")
                print(f"Response: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return False
    
    def test_get_accounts(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            response = self.session.get(f"{self.base_url}/api/v1/accounts")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_rate_limiting(self) -> bool:
        """–¢–µ—Å—Ç rate limiting"""
        print("\n‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting (–æ—Ç–ø—Ä–∞–≤–∫–∞ 5 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤):")
        
        success_count = 0
        blocked_count = 0
        
        for i in range(5):
            try:
                response = self.session.get(f"{self.base_url}/health")
                if response.status_code == 200:
                    success_count += 1
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—à–Ω–æ")
                elif response.status_code == 429:
                    blocked_count += 1
                    print(f"üö´ –ó–∞–ø—Ä–æ—Å {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω rate limiting")
                else:
                    print(f"‚ùì –ó–∞–ø—Ä–æ—Å {i+1}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ {response.status_code}")
            except Exception as e:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –æ—à–∏–±–∫–∞ {e}")
            
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω—ã—Ö, {blocked_count} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
        return success_count > 0  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
    
    def test_file_upload(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_content = b"This is a test file content"
            files = {
                'file': ('test.txt', test_content, 'text/plain')
            }
            data = {
                'category': 'temp'
            }
            
            response = self.session.post(
                f"{self.base_url}/api/v1/files/upload",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {data['filename']}")
                self.file_id = data['id']
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
                print(f"Response: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Kwork Hub API\n")
        
        tests = [
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", self.test_connection),
            ("Health Check", self.test_health_check),
            ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", self.test_docs),
            ("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã", self.test_forbidden_routes),
            ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.register_test_user),
            ("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", self.login_test_user),
            ("–ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint", self.test_protected_endpoint),
            ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Kwork –∞–∫–∫–∞—É–Ω—Ç–∞", self.test_add_kwork_account),
            ("–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", self.test_get_accounts),
            ("Rate Limiting", self.test_rate_limiting),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", self.test_file_upload),
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}:")
            try:
                if test_func():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
                failed += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
        
        if failed == 0:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")

if __name__ == "__main__":
    tester = KworkHubTester()
    tester.run_all_tests()