"""
–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Kwork —á–µ—Ä–µ–∑ Playwright —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫—É–∫–∏
"""
import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, Optional, Any
from playwright.async_api import async_playwright, Browser, BrowserContext, Page
from datetime import datetime, timedelta

from ..core.config import settings

logger = logging.getLogger(__name__)

class KworkPlaywrightAuth:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Kwork —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
    """
    
    def __init__(self, login: str, password: str, cookies_file: Optional[str] = None):
        self.login = login
        self.password = password
        self.cookies_file = cookies_file or f"cookies_{login.replace('@', '_').replace('.', '_')}.json"
        self.cookies_path = Path(f"./uploads/cookies/{self.cookies_file}")
        self.cookies_path.parent.mkdir(parents=True, exist_ok=True)
        
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.close()
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.page:
            await self.page.close()
        if self.context:
            await self.context.close()
        if self.browser:
            await self.browser.close()
    
    async def load_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏"""
        try:
            if self.cookies_path.exists():
                with open(self.cookies_path, 'r', encoding='utf-8') as f:
                    cookies_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–∫–∏
                if 'expires_at' in cookies_data:
                    expires_at = datetime.fromisoformat(cookies_data['expires_at'])
                    if datetime.now() > expires_at:
                        logger.info("–ö—É–∫–∏ –∏—Å—Ç–µ–∫–ª–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        return False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                if self.context and 'cookies' in cookies_data:
                    await self.context.add_cookies(cookies_data['cookies'])
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—É–∫–∏ –∏–∑ {self.cookies_path}")
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")
            return False
    
    async def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            if not self.context:
                return
            
            cookies = await self.context.cookies()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è
            cookies_data = {
                'cookies': cookies,
                'expires_at': (datetime.now() + timedelta(days=7)).isoformat(),
                'login': self.login,
                'saved_at': datetime.now().isoformat()
            }
            
            with open(self.cookies_path, 'w', encoding='utf-8') as f:
                json.dump(cookies_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.cookies_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏: {e}")
    
    async def init_browser(self, headless: bool = True) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            playwright = await async_playwright().start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await playwright.chromium.launch(
                headless=headless,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--no-first-run',
                    '--no-default-browser-check',
                    '--disable-default-apps',
                    '--disable-features=VizDisplayCompositor'
                ]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.context = await self.browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport={'width': 1920, 'height': 1080},
                locale='ru-RU',
                timezone_id='Europe/Moscow'
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    # async def get_cookies_raw(self) -> list[dict[str, Any]]:
    #     """
    #     –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Å—ã—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è Selenium)
    #     """
    #     if self.context:
    #         return await self.context.cookies()
    #
    #     if self.cookies_path.exists():
    #         with open(self.cookies_path, 'r', encoding='utf-8') as f:
    #             cookies_data = json.load(f)
    #         return cookies_data.get('cookies', [])
    #
    #     return []
    async def authenticate_with_browser(self, show_browser: bool = False) -> bool:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        """
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not await self.init_browser(headless=not show_browser):
                return False
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–∫–∏
            cookies_loaded = await self.load_cookies()
            if cookies_loaded:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
                await self.page.goto('https://kwork.ru/profile')
                await asyncio.sleep(2)
                
                current_url = self.page.url
                if '/login' not in current_url and '/profile' in current_url:
                    logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∫—É–∫–∏ —É—Å–ø–µ—à–Ω–∞")
                    return True
                else:
                    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
            await self.page.goto('https://kwork.ru/login')
            await asyncio.sleep(3)
            
            if show_browser:
                print("\n" + "="*60)
                print("üåê –ë–†–ê–£–ó–ï–† –û–¢–ö–†–´–¢ –î–õ–Ø –†–£–ß–ù–û–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
                print("="*60)
                print("1. –í –æ—Ç–∫—Ä—ã—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
                print(f"   üìß Email: {self.login}")
                print(f"   üîë –ü–∞—Ä–æ–ª—å: {self.password}")
                print("2. –ü—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è")
                print("3. –ù–∞–∂–º–∏—Ç–µ Enter –≤ —ç—Ç–æ–º –æ–∫–Ω–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                print("="*60)
                
                # –ñ–¥–µ–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                input("‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
                
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
                logger.info("–ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞...")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
                await self.page.wait_for_load_state('networkidle')
                await asyncio.sleep(2)
                
                # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                email_selectors = [
                    'input[type="email"]',
                    'input[name="login"]',
                    'input[name="email"]',
                    'input[placeholder*="email"]',
                    'input[placeholder*="–ª–æ–≥–∏–Ω"]',
                    '#login',
                    '#email'
                ]
                
                password_selectors = [
                    'input[type="password"]',
                    'input[name="password"]',
                    '#password'
                ]
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ email/–ª–æ–≥–∏–Ω
                email_field = None
                for selector in email_selectors:
                    try:
                        email_field = await self.page.wait_for_selector(selector, timeout=5000)
                        if email_field:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: {selector}")
                            break
                    except:
                        continue
                
                if not email_field:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ email/–ª–æ–≥–∏–Ω–∞")
                    return False
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
                password_field = None
                for selector in password_selectors:
                    try:
                        password_field = await self.page.wait_for_selector(selector, timeout=5000)
                        if password_field:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: {selector}")
                            break
                    except:
                        continue
                
                if not password_field:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
                    return False
                
                # –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                logger.info("–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞...")
                await email_field.fill(self.login)
                await asyncio.sleep(1)
                
                logger.info("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...")
                await password_field.fill(self.password)
                await asyncio.sleep(1)
                
                # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                submit_selectors = [
                    'button[type="submit"]',
                    'input[type="submit"]',
                    'button:has-text("–í–æ–π—Ç–∏")',
                    'button:has-text("–í—Ö–æ–¥")',
                    'button:has-text("–õ–æ–≥–∏–Ω")',
                    '.login-button',
                    '#login-button'
                ]
                
                submit_button = None
                for selector in submit_selectors:
                    try:
                        submit_button = await self.page.wait_for_selector(selector, timeout=3000)
                        if submit_button:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: {selector}")
                            break
                    except:
                        continue
                
                if submit_button:
                    logger.info("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...")
                    await submit_button.click()
                else:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter
                    logger.info("–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–∂–∏–º–∞–µ–º Enter...")
                    await password_field.press('Enter')
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            current_url = self.page.url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
            if '/login' in current_url:
                logger.error("–û—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º –∑–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
            await self.page.goto('https://kwork.ru/profile')
            await asyncio.sleep(2)
            
            final_url = self.page.url
            if '/login' in final_url:
                logger.error("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
                return False
            
            logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏
            await self.save_cookies()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {e}")
            return False
    
    async def get_cookies_for_httpx(self) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è httpx
        """
        try:
            if self.context:
                cookies = await self.context.cookies()
                return {cookie['name']: cookie['value'] for cookie in cookies}
            
            # –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            if self.cookies_path.exists():
                with open(self.cookies_path, 'r', encoding='utf-8') as f:
                    cookies_data = json.load(f)
                
                if 'cookies' in cookies_data:
                    return {cookie['name']: cookie['value'] for cookie in cookies_data['cookies']}
            
            return {}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–∫–∏: {e}")
            return {}

    def get_cookies_for_selenium(self) -> list[dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Selenium
        """
        if not self.cookies_path.exists():
            return []

        with open(self.cookies_path, 'r', encoding='utf-8') as f:
            cookies_data = json.load(f)

        raw_cookies = cookies_data.get('cookies', [])
        selenium_cookies = []

        for cookie in raw_cookies:
            selenium_cookie = {
                "name": cookie["name"],
                "value": cookie["value"],
                "domain": cookie.get("domain", "kwork.ru").lstrip("."),  # –±–µ–∑ —Ç–æ—á–∫–∏
                "path": cookie.get("path", "/"),
                "secure": cookie.get("secure", False),
                "httpOnly": cookie.get("httpOnly", False),
            }
            if "expires" in cookie:
                selenium_cookie["expiry"] = cookie["expires"]
            selenium_cookies.append(selenium_cookie)

        return selenium_cookies

    async def test_authentication(self) -> bool:
        """
        –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        """
        try:
            if not self.page:
                if not await self.init_browser():
                    return False
                await self.load_cookies()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—é
            await self.page.goto('https://kwork.ru/profile')
            await asyncio.sleep(2)
            
            current_url = self.page.url
            return '/login' not in current_url and '/profile' in current_url
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False


async def authenticate_kwork_account(login: str, password: str, 
                                   show_browser: bool = False,
                                   force_new_auth: bool = False) -> Optional[Dict[str, str]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Kwork
    
    Args:
        login: Email –¥–ª—è –≤—Ö–æ–¥–∞
        password: –ü–∞—Ä–æ–ª—å
        show_browser: –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        force_new_auth: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É–∫–∏)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫—É–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ httpx –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    async with KworkPlaywrightAuth(login, password) as auth:
        if force_new_auth:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É–∫–∏
            if auth.cookies_path.exists():
                auth.cookies_path.unlink()
        
        success = await auth.authenticate_with_browser(show_browser=show_browser)
        
        if success:
            cookies = await auth.get_cookies_for_httpx()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(cookies)} –∫—É–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            return cookies
        else:
            logger.error("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return None

