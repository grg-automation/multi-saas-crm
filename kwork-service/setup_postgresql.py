#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
"""

import asyncio
import os
import sys
import subprocess
import time
from pathlib import Path

async def setup_postgresql():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É PostgreSQL –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Kwork Parser...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker...")
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ.")
            return False
        print("‚úÖ Docker –Ω–∞–π–¥–µ–Ω:", result.stdout.strip())
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
        return False
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL
    print("\n2. –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL...")
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        subprocess.run(['docker-compose', '-f', 'docker-compose.postgresql.yml', 'down'], 
                      capture_output=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL
        result = subprocess.run(['docker-compose', '-f', 'docker-compose.postgresql.yml', 'up', '-d'],
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PostgreSQL:", result.stderr)
            return False
        print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL
        print("‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL...")
        for i in range(30):
            try:
                result = subprocess.run(['docker', 'exec', 'kwork_postgres', 'pg_isready', '-U', 'postgres'],
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    print("‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    break
            except:
                pass
            time.sleep(2)
        else:
            print("‚ùå PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PostgreSQL: {e}")
        return False
    
    # 3. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    print("\n3. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...")
    env_content = """# PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=kwork_hub
DATABASE_URL=postgresql://postgres:password@localhost:5432/kwork_hub

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=your-secret-key-change-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Redis
REDIS_URL=redis://localhost:6379

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kwork
KWORK_BASE_URL=https://kwork.ru
KWORK_API_URL=https://kwork.ru/api

# Rate limiting
MAX_REQUESTS_PER_MINUTE=60

# –§–∞–π–ª—ã
MAX_FILE_SIZE=20971520
UPLOAD_DIR=./uploads

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO

# –ó–∞–¥–µ—Ä–∂–∫–∏
MIN_DELAY=1.0
MAX_DELAY=3.0
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    print("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    
    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\n4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:", result.stderr)
            return False
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False
    
    # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("\n5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
        sys.path.insert(0, str(Path.cwd()))
        
        from app.core.database import init_db
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False
    
    # 6. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å SQLite —Ñ–∞–π–ª)
    if Path('kwork_hub.db').exists():
        print("\n6. –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª SQLite, –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        try:
            from migrate_to_postgresql import DataMigrator
            migrator = DataMigrator()
            await migrator.migrate_data()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    else:
        print("\n6. –§–∞–π–ª SQLite –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from app.core.database import db
        pool = await db.get_pool()
        async with pool.acquire() as conn:
            result = await conn.fetchval('SELECT 1')
            if result == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python3 main.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ pgAdmin: http://localhost:5050")
    print("   - –õ–æ–≥–∏–Ω: admin@kwork.com")
    print("   - –ü–∞—Ä–æ–ª—å: admin")
    print("3. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:")
    print("   docker exec -it kwork_postgres psql -U postgres -d kwork_hub")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await setup_postgresql()
        if success:
            print("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        else:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 