import { Injectable, Logger } from '@nestjs/common';
import { DataSource } from 'typeorm';
import axios from 'axios';
import { TelegramServiceV2 } from '../telegram-user/telegram-service-v2';
import { MessagingWebSocketGateway } from '../websocket/websocket.gateway';

export interface AnonymizedChatInfo {
  id: string;
  title: string;
  contact: string;
  status: string;
  channel: string;
  lastActivity: string;
}

export interface AnonymizedMessage {
  id: string;
  content: string;
  timestamp: string;
  sender: string;
  isFromManager: boolean;
  messageType: 'text' | 'image' | 'file';
}

export interface ManagerStats {
  totalAssignedChats: number;
  activeChats: number;
  totalMessages: number;
  messagesThisWeek: number;
}

@Injectable()
export class ManagerService {
  private readonly logger = new Logger(ManagerService.name);

  constructor(
    private readonly telegramServiceV2: TelegramServiceV2,
    private readonly webSocketGateway: MessagingWebSocketGateway,
    private readonly dataSource: DataSource
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
   */
  async getAnonymizedChatInfo(chatId: string): Promise<AnonymizedChatInfo> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ Telegram API
      const sessionId = await this.getActiveTelegramSession();
      
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram API
      return {
        id: chatId,
        title: `–î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º`,
        contact: `–ö–æ–Ω—Ç–∞–∫—Ç #${chatId.slice(-4)}`, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
        status: '–ê–∫—Ç–∏–≤–µ–Ω',
        channel: 'Telegram',
        lastActivity: new Date().toISOString()
      };
    } catch (error) {
      this.logger.error(`Failed to get chat info: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getAnonymizedChatMessages(
    chatId: string, 
    limit: number = 50, 
    offset: number = 0
  ): Promise<AnonymizedMessage[]> {
    try {
      const sessionId = await this.getActiveTelegramSession();
      
      if (!sessionId) {
        this.logger.warn('No active Telegram session found');
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Telegram API
      const messages = await this.telegramServiceV2.getChatHistory(sessionId, chatId, limit);
      
      // –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const anonymizedMessages: AnonymizedMessage[] = (messages || []).map((msg: any, index: number) => {
        // –§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
        
        const messageType = this.detectMessageType(msg);
        let content = msg.message || msg.text || '';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è msg.message)
        if (messageType === 'file' && msg.media?.document) {
          const document = msg.media.document;
          let fileName = '–î–æ–∫—É–º–µ–Ω—Ç';
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
          if (document.attributes) {
            for (const attr of document.attributes) {
              if (attr.fileName || (attr.className && attr.className.includes('DocumentAttributeFilename'))) {
                fileName = attr.fileName || attr.file_name || fileName;
                break;
              }
              if (attr._ === 'documentAttributeFilename' || attr._name === 'DocumentAttributeFilename') {
                fileName = attr.fileName || attr.file_name || fileName;
                break;
              }
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º msg.message –∫–∞–∫ fallback
          if (fileName === '–î–æ–∫—É–º–µ–Ω—Ç' && content) {
            fileName = content;
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ MIME —Ç–∏–ø—É
          const mimeType = document.mimeType || document.mime_type || '';
          let icon = 'üìÑ';
          if (mimeType.startsWith('image/')) {
            icon = 'üñºÔ∏è';
          } else if (mimeType.startsWith('video/')) {
            icon = 'üé•';
          } else if (mimeType.startsWith('audio/')) {
            icon = 'üéß';
          }
          
          // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∏–º–µ–Ω–µ–º
          content = `${icon} ${fileName}`;
        } else if (messageType === 'image') {
          content = content ? `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n${content}` : 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
        } else if (!content) {
          content = '[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]';
        }

        return {
          id: msg.id?.toString() || index.toString(),
          content: content,
          timestamp: msg.date ? new Date(msg.date * 1000).toISOString() : new Date().toISOString(),
          sender: msg.out ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' : '–ö–æ–Ω—Ç–∞–∫—Ç', // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
          isFromManager: msg.out || false,
          messageType: messageType
        };
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
      const sortedMessages = anonymizedMessages.sort((a, b) => 
        new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
      );

      this.logger.log(`Retrieved ${sortedMessages.length} anonymized messages for chat ${chatId}`);
      return sortedMessages;
      
    } catch (error) {
      this.logger.error(`Failed to get chat messages: ${error.message}`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async sendMessageAsManager(
    chatId: string,
    content: string,
    messageType: 'text' | 'image' | 'file' = 'text',
    managerId?: string
  ): Promise<{ messageId: string; sentAt: string }> {
    try {
      const sessionId = await this.getActiveTelegramSession();
      
      if (!sessionId) {
        throw new Error('No active Telegram session available');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
      const result = await this.telegramServiceV2.sendMessage(sessionId, {
        chatId: chatId,
        message: content,
        parseMode: undefined
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      const update = {
        type: 'new_message' as const,
        sessionId: sessionId,
        chatId: chatId,
        data: {
          messageId: result.messageId,
          text: content,
          date: new Date().toISOString(),
          isOutgoing: true,
          fromManager: true,
          managerId: managerId
        }
      };

      this.webSocketGateway.sendTelegramUpdate(update);

      this.logger.log(`Manager message sent to chat ${chatId}: ${result.messageId}`);
      
      return {
        messageId: result.messageId?.toString() || Date.now().toString(),
        sentAt: new Date().toISOString()
      };
      
    } catch (error) {
      this.logger.error(`Failed to send manager message: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async sendFileAsManager(
    chatId: string,
    file: Express.Multer.File,
    managerId?: string
  ): Promise<{ messageId: string; sentAt: string }> {
    try {
      const sessionId = await this.getActiveTelegramSession();
      
      if (!sessionId) {
        throw new Error('No active Telegram session available');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
      const result = await this.telegramServiceV2.sendFile(
        sessionId, 
        chatId, 
        file, 
        file.originalname || '–§–∞–π–ª –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      const update = {
        type: 'new_message' as const,
        sessionId: sessionId,
        chatId: chatId,
        data: {
          messageId: result.messageId,
          text: `üìé ${file.originalname || '–§–∞–π–ª'}`,
          date: new Date().toISOString(),
          isOutgoing: true,
          fromManager: true,
          managerId: managerId,
          messageType: 'file'
        }
      };

      this.webSocketGateway.sendTelegramUpdate(update);

      this.logger.log(`Manager file sent to chat ${chatId}: ${result.messageId}`);
      
      return {
        messageId: result.messageId?.toString() || Date.now().toString(),
        sentAt: new Date().toISOString()
      };
      
    } catch (error) {
      this.logger.error(`Failed to send manager file: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async getManagerStats(managerId?: string): Promise<ManagerStats> {
    try {
      if (!managerId) {
        return {
          totalAssignedChats: 0,
          activeChats: 0,
          totalMessages: 0,
          messagesThisWeek: 0
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –ë–î —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
      const uniqueChatsCount = await this.dataSource.query(`
        SELECT COUNT(DISTINCT thread_id) as count
        FROM chat_assignments 
        WHERE manager_id = $1 AND is_active = $2
      `, [managerId, true]);

      const totalAssignedChats = parseInt(uniqueChatsCount[0]?.count || 0, 10);

      return {
        totalAssignedChats,
        activeChats: totalAssignedChats, // –ü–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ —á–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã
        totalMessages: 150, // Mock –¥–∞–Ω–Ω—ã–µ
        messagesThisWeek: 25 // Mock –¥–∞–Ω–Ω—ã–µ
      };
    } catch (error) {
      this.logger.error(`Failed to get manager stats: ${error.message}`);
      // Fallback –∫ mock –¥–∞–Ω–Ω—ã–º
      return {
        totalAssignedChats: 1,
        activeChats: 1,
        totalMessages: 150,
        messagesThisWeek: 25
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async getAssignedThreadIds(managerId: string): Promise<string[]> {
    try {
      this.logger.log(`Getting assigned thread IDs for manager: ${managerId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ email)
      let assignments;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ managerId UUID –∏–ª–∏ email
      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(managerId);
      
      if (isUUID) {
        // –ü–æ–∏—Å–∫ –ø–æ UUID
        assignments = await this.dataSource.query(`
          SELECT thread_id FROM chat_assignments 
          WHERE manager_id = $1 AND is_active = true
          ORDER BY assigned_at DESC
        `, [managerId]);
      } else {
        // –ü–æ–∏—Å–∫ –ø–æ email
        assignments = await this.dataSource.query(`
          SELECT ca.thread_id 
          FROM chat_assignments ca
          INNER JOIN users u ON ca.manager_id = u.id
          WHERE u.email = $1 AND ca.is_active = true
          ORDER BY ca.assigned_at DESC
        `, [managerId]);
      }
      
      const threadIds = assignments.map((assignment: any) => assignment.thread_id);
      
      this.logger.log(`Found ${threadIds.length} assigned thread IDs for manager ${managerId}`);
      return threadIds;
    } catch (error) {
      this.logger.error(`Error getting assigned thread IDs: ${error.message}`);
      throw error;
    }
  }

  async getAssignedChats(managerId: string): Promise<AnonymizedChatInfo[]> {
    this.logger.log(`Getting assigned chats for manager: ${managerId}`);
    this.logger.log(`üî• NEW CODE VERSION - SHOULD RETURN REAL CHATS!!! üî•`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –ë–î
      const threadIds = await this.getAssignedThreadIds(managerId);
      
      if (threadIds.length === 0) {
        this.logger.log(`No assigned chats found for manager ${managerId}`);
        return [];
      }
      
      // –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
      const chats: AnonymizedChatInfo[] = threadIds.map((threadId, index) => {
        const chatNumber = threadId.replace('telegram_thread_', '');
        return {
          id: threadId,
          title: `Telegram Chat #${index + 1}`,
          contact: `–ö–æ–Ω—Ç–∞–∫—Ç #${chatNumber}`,
          status: 'open',
          channel: 'Telegram', 
          lastActivity: new Date().toISOString()
        };
      });
      
      this.logger.log(`Returning ${chats.length} assigned chats for manager ${managerId}`);
      return chats;
    } catch (error) {
      this.logger.error(`Error getting assigned chats: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é Telegram —Å–µ—Å—Å–∏—é
   */
  private async getActiveTelegramSession(): Promise<string | null> {
    try {
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
      // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      return 'tg_user_1754039348073_xnqhblt8r';
      
    } catch (error) {
      this.logger.error(`Failed to get active session: ${error.message}`);
      return null;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private detectMessageType(msg: any): 'text' | 'image' | 'file' {
    if (msg.media) {
      if (msg.media.photo || msg.media.type === 'MessageMediaPhoto') return 'image';
      if (msg.media.document || msg.media.type === 'MessageMediaDocument') return 'file';
    }
    return 'text';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
   */
  async getAllManagers(): Promise<any[]> {
    try {
      this.logger.log('Getting all managers from database');
      
      const managers = await this.dataSource.query(`
        SELECT 
          u.id, 
          u.email, 
          u.first_name, 
          u.last_name, 
          u.created_at,
          COUNT(ca.id) as chat_count
        FROM users u
        LEFT JOIN chat_assignments ca ON u.id = ca.manager_id AND ca.is_active = true
        WHERE u.role = 'MANAGER' AND u.is_active = true
        GROUP BY u.id, u.email, u.first_name, u.last_name, u.created_at
        ORDER BY u.first_name, u.last_name
      `);
      
      this.logger.log(`Found ${managers.length} managers`);
      return managers.map((manager: any) => ({
        id: manager.id,
        email: manager.email,
        name: `${manager.first_name || ''} ${manager.last_name || ''}`.trim() || manager.email,
        firstName: manager.first_name,
        lastName: manager.last_name,
        createdAt: manager.created_at,
        chatCount: parseInt(manager.chat_count) || 0
      }));
    } catch (error) {
      this.logger.error(`Error getting managers: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∏—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Kotlin CRM API
   */
  async assignChatToManager(threadId: string, managerId: string): Promise<any> {
    try {
      this.logger.log(`Assigning chat ${threadId} to manager ${managerId} directly in DB`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
      const manager = await this.dataSource.query(`
        SELECT id, email FROM users 
        WHERE id = $1 AND role = 'MANAGER' AND is_active = true
      `, [managerId]);
      
      if (!manager || manager.length === 0) {
        throw new Error(`Manager with ID ${managerId} not found or inactive`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const existingAssignment = await this.dataSource.query(`
        SELECT id FROM chat_assignments 
        WHERE thread_id = $1 AND is_active = true
      `, [threadId]);
      
      if (existingAssignment && existingAssignment.length > 0) {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        await this.dataSource.query(`
          UPDATE chat_assignments 
          SET is_active = false
          WHERE thread_id = $1 AND is_active = true
        `, [threadId]);
        this.logger.log(`Deactivated existing assignment for thread ${threadId}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
      const result = await this.dataSource.query(`
        INSERT INTO chat_assignments (id, manager_id, thread_id, assigned_at, is_active, assigned_by)
        VALUES (gen_random_uuid(), $1, $2, NOW(), true, $3)
        RETURNING id, assigned_at
      `, [managerId, threadId, '11111111-1111-1111-1111-111111111111']); // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞
      
      this.logger.log(`Successfully assigned chat ${threadId} to manager ${managerId}`);
      
      return {
        success: true,
        data: {
          assignmentId: result[0].id,
          threadId,
          managerId,
          assignedAt: result[0].assigned_at
        }
      };
    } catch (error) {
      this.logger.error(`Failed to assign chat: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ CRM API
   */
  private async getAdminToken(): Promise<string> {
    try {
      const response = await axios.post(
        'http://identity-service:3002/api/v1/auth/login',
        {
          email: 'admin@test.com',
          password: 'test123'
        },
        {
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 5000
        }
      );
      
      return response.data.data.accessToken;
    } catch (error) {
      this.logger.error(`Failed to get admin token: ${error.message}`);
      throw new Error('Failed to authenticate admin user');
    }
  }
}