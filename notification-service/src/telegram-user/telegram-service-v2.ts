// @ts-nocheck
/* eslint-disable */
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { CustomFile } from 'telegram/client/uploads';
import { Api } from 'telegram/tl';
import { MessagingWebSocketGateway } from '../websocket/websocket.gateway';
import { TelegramSessionRepository } from './repositories/telegram-session.repository';

/**
 * Telegram User Service V2 - –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ GramJS
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–æ–∂–Ω—ã–π MTProto –∫–æ–¥ –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

export interface TelegramSessionV2 {
  id: string;
  phoneNumber: string;
  userId?: number;
  isAuthenticated: boolean;
  isConnected: boolean;
  lastActivity: Date;
  sessionString?: string; // GramJS —Å–µ—Å—Å–∏—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  metadata?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (webhook URL –∏ —Ç.–¥.)
}

export interface TelegramMessageV2 {
  chatId: string | number;
  message: string;
  parseMode?: 'HTML' | 'Markdown';
  replyToMessageId?: number;
}

export interface TelegramChatV2 {
  id: string; // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ string –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ BigInteger
  type: 'private' | 'group' | 'supergroup' | 'channel';
  title?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  isBot?: boolean;
}

@Injectable()
export class TelegramServiceV2 {
  private readonly logger = new Logger(TelegramServiceV2.name);
  private sessions = new Map<string, TelegramSessionV2>();
  private clients = new Map<string, TelegramClient>(); // GramJS clients
  private pollingIntervals = new Map<string, NodeJS.Timeout>();
  private lastMessageIds = new Map<string, Map<string, number>>(); // sessionId -> chatId -> lastMessageId
  
  constructor(
    private configService: ConfigService,
    private webSocketGateway: MessagingWebSocketGateway,
    private sessionRepository: TelegramSessionRepository,
  ) {
    this.initializeService();
  }

  private async initializeService() {
    this.logger.log('üöÄ Initializing Telegram Service V2 (GramJS) with Database persistence...');
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await this.restoreSavedSessions();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await this.autoReconnectActiveSessions();

    this.logger.log('‚úÖ Telegram Service V2 initialized successfully with Database persistence');
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  private async restoreSavedSessions(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const sessionEntities = await this.sessionRepository.getAuthenticatedSessions();
      
      for (const entity of sessionEntities) {
        try {
          const session = this.sessionRepository.entityToSession(entity);
          
          // –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          session.isConnected = false;
          
          this.sessions.set(session.id, session);
          this.logger.log(`üì± Restored session from DB: ${session.phoneNumber} (${session.id})`);
        } catch (error) {
          this.logger.error(`Failed to restore session from DB ${entity.sessionId}:`, error);
        }
      }
      
      this.logger.log(`‚úÖ Restored ${sessionEntities.length} sessions from database`);
      
    } catch (error) {
      this.logger.error('Failed to restore saved sessions from database:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveSessionToDatabase(session: TelegramSessionV2, tenantId?: string): Promise<void> {
    try {
      await this.sessionRepository.saveSession(session, tenantId);
      this.logger.debug(`üíæ Session saved to DB: ${session.phoneNumber}`);
    } catch (error) {
      this.logger.error(`Failed to save session ${session.id} to database:`, error);
    }
  }

  // –ú–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞
   * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private async autoReconnectActiveSessions(): Promise<void> {
    try {
      const activeSessions = Array.from(this.sessions.values()).filter(
        session => session.isAuthenticated && session.sessionString
      );

      if (activeSessions.length === 0) {
        this.logger.log('üîÑ No active sessions found for auto-reconnection');
        return;
      }

      this.logger.log(`üîÑ Auto-reconnecting ${activeSessions.length} active sessions...`);

      const reconnectionPromises = activeSessions.map(async (session) => {
        try {
          await this.reconnectSessionSilently(session.id);
          this.logger.log(`‚úÖ Auto-reconnected session: ${session.phoneNumber} (${session.id})`);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          // –û–¢–ö–õ–Æ–ß–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ Smart Polling/—Å–æ–±—ã—Ç–∏–π
          // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pure webhooks - –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
          this.logger.log(`üì¥ Session restored but auto-listening disabled: ${session.phoneNumber} (${session.id}) - use webhook setup`);
          // try {
          //   await this.startListening(session.id);
          //   this.logger.log(`üéß Started real-time listening for session: ${session.phoneNumber} (${session.id})`);
          // } catch (listeningError) {
          //   this.logger.warn(`‚ö†Ô∏è Failed to start listening for session ${session.phoneNumber}: ${listeningError.message}`);
          // }
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Failed to auto-reconnect session ${session.phoneNumber}: ${error.message}`);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        }
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö
      await Promise.allSettled(reconnectionPromises);
      
      this.logger.log('üîÑ Auto-reconnection process completed');

    } catch (error) {
      this.logger.error('Failed to auto-reconnect active sessions:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    }
  }

  /**
   * –¢–∏—Ö–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
   */
  private async reconnectSessionSilently(sessionId: string): Promise<void> {
    const session = this.sessions.get(sessionId);
    
    if (!session || !session.isAuthenticated || !session.sessionString) {
      throw new Error(`Session ${sessionId} not found or not authenticated`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º API credentials
    const apiId = parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456');
    const apiHash = this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    const stringSession = new StringSession(session.sessionString);
    const client = new TelegramClient(stringSession, apiId, apiHash, {
      connectionRetries: 3,
      retryDelay: 1000,
      timeout: 8000
    });
    
    await client.connect();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    this.clients.set(sessionId, client);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    session.isConnected = true;
    session.lastActivity = new Date();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª
    await this.saveSessionToDatabase(session);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async initiateAuth(phoneNumber: string): Promise<{ sessionId: string; codeSent: boolean }> {
    try {
      this.logger.log(`üîê Initiating auth for phone: ${phoneNumber}`);
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
      const sessionId = `tg_user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // –ü–æ–ª—É—á–∞–µ–º API credentials
      const apiId = parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456');
      const apiHash = this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash';
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const session: TelegramSessionV2 = {
        id: sessionId,
        phoneNumber: phoneNumber,
        isAuthenticated: false,
        isConnected: false,
        lastActivity: new Date(),
        sessionString: '' // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
      };
      
      // –°–æ–∑–¥–∞–µ–º GramJS –∫–ª–∏–µ–Ω—Ç–∞
      const stringSession = new StringSession(session.sessionString);
      const client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5,
        retryDelay: 1000,
        timeout: 10000,
        requestRetries: 3
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∫–ª–∏–µ–Ω—Ç–∞
      this.sessions.set(sessionId, session);
      this.clients.set(sessionId, client);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ client.start()
      await client.connect();
      
      let codeSent = false;
      let sendCodeResult: any = null;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
      const { Api } = require('telegram');
      
      const result = await client.invoke(new Api.auth.SendCode({
        phoneNumber: phoneNumber,
        apiId: apiId,
        apiHash: apiHash,
        settings: new Api.CodeSettings({
          allowFlashcall: false,
          currentNumber: false,
          allowAppHash: false
        })
      }));
      
      this.logger.log(`üì± Auth code sent to ${phoneNumber}, session: ${sessionId}`);
      this.logger.log(`üîç SendCode result:`, {
        type: result.type?.className,
        nextType: result.nextType?.className,
        timeout: result.timeout,
        phoneCodeHash: result.phoneCodeHash ? 'present' : 'missing'
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º phoneCodeHash –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      session.metadata = { phoneCodeHash: result.phoneCodeHash };
      
      return {
        sessionId: sessionId,
        codeSent: true
      };
      
    } catch (error) {
      this.logger.error(`Failed to initiate auth for ${phoneNumber}:`, error);
      throw new Error(`Authentication initiation failed: ${error.message}`);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
   */
  async initiateQRAuth(): Promise<{ sessionId: string; qrCode: string }> {
    try {
      const sessionId = `tg_user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      this.logger.log(`üîê Initiating QR auth, session: ${sessionId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º API credentials
      const apiId = parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456');
      const apiHash = this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash';
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const session: TelegramSessionV2 = {
        id: sessionId,
        phoneNumber: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        isAuthenticated: false,
        isConnected: false,
        lastActivity: new Date(),
        sessionString: '',
        metadata: { authMethod: 'qr' }
      };
      
      this.sessions.set(sessionId, session);
      
      // –°–æ–∑–¥–∞–µ–º GramJS –∫–ª–∏–µ–Ω—Ç–∞
      const stringSession = new StringSession('');
      const client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5,
        retryDelay: 1000,
        timeout: 10000
      });
      
      this.clients.set(sessionId, client);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
      await client.connect();
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ–¥—Ö–æ–¥—É - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const { Api } = require('telegram');
      
      try {
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º login token –¥–ª—è QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏  
        const result = await client.invoke(new Api.auth.ExportLoginToken({
          apiId: apiId,
          apiHash: apiHash,
          exceptIds: []
        }));
        
        if (result.className === 'auth.LoginToken') {
          this.logger.log(`üì± QR Code generated for session ${sessionId}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –∫–æ–¥ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
          session.metadata = { ...session.metadata, qrToken: result.token };
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–æ–Ω–µ
          this.improvedQRPolling(client, sessionId, result.token, session);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º QR –∫–æ–¥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ  
          return {
            sessionId: sessionId,
            qrCode: `tg://login?token=${Buffer.from(result.token).toString('base64url')}`
          };
        } else {
          throw new Error('Failed to generate login token');
        }
      } catch (error) {
        this.logger.error(`QR Auth error for session ${sessionId}:`, error);
        throw new Error(`QR Authentication failed: ${error.message}`);
      }
      
    } catch (error) {
      this.logger.error(`Failed to initiate QR auth:`, error);
      throw new Error(`QR Authentication initiation failed: ${error.message}`);
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  private async improvedQRPolling(client: TelegramClient, sessionId: string, token: any, session: TelegramSessionV2) {
    const { Api } = require('telegram');
    
    let pollCount = 0;
    const maxPolls = 30; // 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    
    this.logger.log(`üîÑ Starting improved QR polling for session ${sessionId}`);
    
    const pollInterval = setInterval(async () => {
      try {
        pollCount++;
        this.logger.log(`üîÑ QR poll attempt ${pollCount}/${maxPolls} for session ${sessionId}`);
        
        // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å login token
        const result = await client.invoke(new Api.auth.ImportLoginToken({
          token: token
        }));
        
        this.logger.log(`üìã QR poll result: ${result.className}`);
        
        if (result.className === 'auth.Authorization') {
          this.logger.log(`‚úÖ QR Auth SUCCESS for session ${sessionId}!`);
          clearInterval(pollInterval);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          session.isAuthenticated = true;
          session.isConnected = true;
          session.sessionString = client.session.save() as any;
          session.lastActivity = new Date();
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          try {
            const me = await client.getMe();
            session.phoneNumber = me.phone || '';
            session.userId = Number(me.id);
            this.logger.log(`üë§ User authenticated: ${me.firstName} ${me.lastName} (${me.phone})`);
          } catch (error) {
            this.logger.warn(`Could not get user info: ${error.message}`);
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –ë–î
          this.sessions.set(sessionId, session);
          await this.saveTelegramSession(session);
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
          this.setupEventHandlers(client, sessionId);
          
          this.logger.log(`üíæ REAL SESSION SAVED: ${sessionId}`);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (pollCount >= maxPolls) {
          clearInterval(pollInterval);
          this.logger.log(`‚è∞ QR polling timeout for session ${sessionId}`);
        }
        
      } catch (error) {
        if (error.message.includes('AUTH_TOKEN_EXPIRED')) {
          this.logger.log(`‚è∞ QR token expired for session ${sessionId}`);
          clearInterval(pollInterval);
        } else if (error.message.includes('SESSION_PASSWORD_NEEDED')) {
          this.logger.log(`üîê 2FA required for session ${sessionId}`);
          clearInterval(pollInterval);
        } else {
          this.logger.error(`QR polling error for session ${sessionId}: ${error.message}`);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if (pollCount >= maxPolls) {
          clearInterval(pollInterval);
        }
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  }

  /**
   * –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  private async pollQRLoginStatus(client: TelegramClient, sessionId: string, token: any, session: TelegramSessionV2, expires?: Date) {
    const { Api } = require('telegram');
    
    let pollCount = 0;
    const maxPolls = 150; // 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    
    const pollInterval = setInterval(async () => {
      try {
        pollCount++;
        this.logger.log(`üîÑ Polling QR status for session ${sessionId} (${pollCount}/${maxPolls})`);
        
        const result = await client.invoke(new Api.auth.ImportLoginToken({
          token: token
        }));
        
        this.logger.log(`üìã Poll result for ${sessionId}:`, result.className);
        
        if (result.className === 'auth.Authorization') {
          this.logger.log(`‚úÖ QR Auth successful for session ${sessionId}`);
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å
          clearInterval(pollInterval);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          session.isAuthenticated = true;
          session.isConnected = true;
          session.phoneNumber = result.user?.phone || '';
          session.userId = result.user?.id ? Number(result.user.id) : undefined;
          session.sessionString = client.session.save() as any;
          session.lastActivity = new Date();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
          this.sessions.set(sessionId, session);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await this.saveTelegramSession(session);
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          this.setupEventHandlers(client, sessionId);
          
          this.logger.log(`üíæ Session saved to database: ${sessionId}`);
        } else if (result.className === 'auth.LoginToken') {
          // QR –∫–æ–¥ –µ—â–µ –∂–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          this.logger.log(`‚è≥ QR code waiting to be scanned for session ${sessionId}`);
        }
      } catch (error) {
        if (error.message.includes('SESSION_PASSWORD_NEEDED')) {
          this.logger.log(`üîê 2FA password required for session ${sessionId}`);
          clearInterval(pollInterval);
        } else if (error.message.includes('AUTH_TOKEN_EXPIRED')) {
          this.logger.log(`‚è∞ QR token expired for session ${sessionId}`);
          clearInterval(pollInterval);
        } else {
          this.logger.error(`QR polling error for session ${sessionId}:`, error.message);
          // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          this.logger.debug(`Full polling error:`, error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if (pollCount >= maxPolls) {
          clearInterval(pollInterval);
          this.logger.log(`‚è∞ Max polling attempts reached for session ${sessionId}`);
        }
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      clearInterval(pollInterval);
      this.logger.log(`‚è∞ QR polling timeout for session ${sessionId}`);
    }, 5 * 60 * 1000);
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
   */
  async importSessionFromString(sessionString: string, phoneNumber: string = '+77476454491'): Promise<TelegramSessionV2> {
    const sessionId = `tg_imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    this.logger.log(`üì• Importing session from string: ${sessionId}`);
    
    try {
      const apiId = parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456');
      const apiHash = this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash';
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
      const stringSession = new StringSession(sessionString);
      const client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5,
      });
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
      await client.connect();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
      const me = await client.getMe();
      
      this.logger.log(`‚úÖ Session imported successfully: ${me.firstName} ${me.lastName} (${me.phone})`);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏
      const session: TelegramSessionV2 = {
        id: sessionId,
        phoneNumber: me.phone || phoneNumber,
        isAuthenticated: true,
        isConnected: true,
        lastActivity: new Date(),
        sessionString: client.session.save() as any,
        userId: Number(me.id),
        metadata: { authMethod: 'imported' }
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      this.sessions.set(sessionId, session);
      this.clients.set(sessionId, client);
      await this.saveTelegramSession(session);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers(client, sessionId);
      
      this.logger.log(`üíæ Imported session saved: ${sessionId}`);
      
      return session;
    } catch (error) {
      this.logger.error(`Failed to import session: ${error.message}`);
      throw new Error(`Session import failed: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–±—Ö–æ–¥–∏—Ç rate limiting)
   */
  async createTestSession(phoneNumber: string = '+77476454491'): Promise<TelegramSessionV2> {
    const sessionId = `tg_test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    this.logger.log(`üß™ Creating test session: ${sessionId}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const session: TelegramSessionV2 = {
      id: sessionId,
      phoneNumber: phoneNumber,
      isAuthenticated: true,
      isConnected: true,
      lastActivity: new Date(),
      sessionString: 'test_session_string_for_development',
      userId: 123456789,
      metadata: { authMethod: 'test' }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    this.sessions.set(sessionId, session);
    await this.saveTelegramSession(session);
    
    this.logger.log(`‚úÖ Test session created: ${sessionId}`);
    
    return session;
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  async completeAuth(sessionId: string, code: string, password?: string): Promise<TelegramSessionV2> {
    try {
      this.logger.log(`üîë Completing auth for session: ${sessionId}`);
      
      const session = this.sessions.get(sessionId);
      const client = this.clients.get(sessionId);
      
      if (!session || !client) {
        throw new Error(`Session ${sessionId} not found`);
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API
      const { Api } = require('telegram');
      
      try {
        const result = await client.invoke(new Api.auth.SignIn({
          phoneNumber: session.phoneNumber,
          phoneCodeHash: session.metadata?.phoneCodeHash || '',
          phoneCode: code
        }));
        
        this.logger.log(`‚úÖ SignIn successful for ${sessionId}:`, result.className);
        
        if (result.className === 'auth.Authorization') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          session.isAuthenticated = true;
          session.isConnected = true;
          session.lastActivity = new Date();
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º session string –∏—Å–ø–æ–ª—å–∑—É—è GramJS API
          const sessionString = client.session.save();
          session.sessionString = String(sessionString || '');
          
          // –ü–æ–ª—É—á–∞–µ–º user ID –∏–∑ result.user
          if (result.user && result.user.id) {
            session.userId = Number(result.user.id);
          } else {
            this.logger.warn(`No user ID in auth result for ${sessionId}`);
            session.userId = 0;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
          this.sessions.set(sessionId, session);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
          try {
            await this.saveSessionToDatabase(session);
            this.logger.log(`üíæ Session successfully saved to database: ${sessionId}`);
          } catch (dbError) {
            this.logger.error(`Failed to save session to database: ${dbError.message}`);
          }
          
          return session;
        } else {
          throw new Error(`Unexpected auth result: ${result.className}`);
        }
      } catch (signInError) {
        this.logger.error(`SignIn failed, trying with sendCode approach:`, signInError.message);
        
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º sendCode + signIn
        const sendCodeResult = await client.invoke(new Api.auth.SendCode({
          phoneNumber: session.phoneNumber,
          apiId: parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456'),
          apiHash: this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash',
          settings: new Api.CodeSettings({
            allowFlashcall: false,
            currentNumber: false,
            allowAppHash: false
          })
        }));
        
        const result = await client.invoke(new Api.auth.SignIn({
          phoneNumber: session.phoneNumber,
          phoneCodeHash: sendCodeResult.phoneCodeHash,
          phoneCode: code
        }));
        
        if (result.className === 'auth.Authorization') {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (fallback)
          session.isAuthenticated = true;
          session.isConnected = true;
          session.lastActivity = new Date();
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º session string –∏—Å–ø–æ–ª—å–∑—É—è GramJS API
          const sessionString = client.session.save();
          session.sessionString = String(sessionString || '');
          
          // –ü–æ–ª—É—á–∞–µ–º user ID –∏–∑ result.user
          if (result.user && result.user.id) {
            session.userId = Number(result.user.id);
          } else {
            this.logger.warn(`No user ID in fallback auth result for ${sessionId}`);
            session.userId = 0;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
          this.sessions.set(sessionId, session);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
          try {
            await this.saveSessionToDatabase(session);
            this.logger.log(`üíæ Fallback session successfully saved to database: ${sessionId}`);
          } catch (dbError) {
            this.logger.error(`Failed to save fallback session to database: ${dbError.message}`);
          }
          
          return session;
        }
        
        return result;
      }
      
    } catch (error) {
      this.logger.error(`Failed to complete auth for session ${sessionId}:`, error);
      throw new Error(`Authentication completion failed: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
   */
  getSession(sessionId: string): TelegramSessionV2 | undefined {
    return this.sessions.get(sessionId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   */
  getAllSessions(): TelegramSessionV2[] {
    return Array.from(this.sessions.values());
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é
   */
  async disconnectSession(sessionId: string): Promise<void> {
    try {
      this.logger.log(`üîå Disconnecting session: ${sessionId}`);
      
      const client = this.clients.get(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (client) {
        await client.disconnect();
        this.clients.delete(sessionId);
      }
      
      if (session) {
        session.isConnected = false;
        session.lastActivity = new Date();
        await this.saveSessionToDatabase(session);
      }
      
      this.logger.log(`‚úÖ Session ${sessionId} disconnected`);
    } catch (error) {
      this.logger.error(`Failed to disconnect session ${sessionId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
   */
  async reconnectSession(sessionId: string): Promise<void> {
    try {
      const session = this.sessions.get(sessionId);
      
      if (!session || !session.isAuthenticated) {
        throw new Error(`Session ${sessionId} not found or not authenticated`);
      }
      
      this.logger.log(`üîÑ Reconnecting session: ${sessionId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º API credentials
      const apiId = parseInt(this.configService.get<string>('TELEGRAM_API_ID') || '123456');
      const apiHash = this.configService.get<string>('TELEGRAM_API_HASH') || 'your_api_hash';
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
      const stringSession = new StringSession(session.sessionString || '');
      const client = new TelegramClient(stringSession, apiId, apiHash, {
        connectionRetries: 5,
        retryDelay: 1000,
        timeout: 10000
      });
      
      await client.connect();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      this.clients.set(sessionId, client);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      session.isConnected = true;
      session.lastActivity = new Date();
      
      this.logger.log(`‚úÖ Session ${sessionId} reconnected successfully`);
    } catch (error) {
      this.logger.error(`Failed to reconnect session ${sessionId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
   */
  private async getClient(sessionId: string): Promise<TelegramClient> {
    let client = this.clients.get(sessionId);
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      throw new Error(`Session ${sessionId} not found`);
    }
    
    if (!client || !client.connected) {
      await this.reconnectSession(sessionId);
      client = this.clients.get(sessionId);
    }
    
    if (!client) {
      throw new Error(`Failed to get client for session ${sessionId}`);
    }
    
    return client;
  }

  // ===============================
  // MESSAGING METHODS
  // ===============================

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –°–õ–û–ñ–ù–û–°–¢–ï–ô
   */
  async sendMessage(sessionId: string, message: TelegramMessageV2): Promise<any> {
    try {
      this.logger.log(`üì§ Sending message via session ${sessionId} to chat ${message.chatId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // GramJS –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∑–∞ –Ω–∞—Å - –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö peer resolution!
      const result = await client.sendMessage(message.chatId, {
        message: message.message,
        parseMode: message.parseMode,
        replyTo: message.replyToMessageId
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      session.lastActivity = new Date();
      
      this.logger.log(`‚úÖ Message sent successfully: ${result.id}`);
      
      return {
        messageId: result.id,
        date: result.date,
        chatId: message.chatId
      };
      
    } catch (error) {
      this.logger.error(`Failed to send message via session ${sessionId}:`, error);
      throw new Error(`Message sending failed: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
   */
  async getUserChats(sessionId: string, limit = 100): Promise<TelegramChatV2[]> {
    try {
      this.logger.log(`üìã Getting chats for session ${sessionId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // GramJS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∫–µ—à–µ–π
      const dialogs = await client.getDialogs({ limit });
      
      const chats: TelegramChatV2[] = [];
      
      for (const dialog of dialogs) {
        const entity = dialog.entity;
        
        if (!entity) continue;
        
        let chat: TelegramChatV2;
        
        if ('firstName' in entity) {
          // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          chat = {
            id: String(entity.id || ''), // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ
            type: 'private',
            firstName: entity.firstName,
            lastName: entity.lastName,
            username: (entity as any).username,
            isBot: (entity as any).bot || false
          };
        } else if ('title' in entity) {
          // –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
          chat = {
            id: String((entity as any).id || ''), // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ
            type: (entity as any).broadcast ? 'channel' : 
                  (entity as any).megagroup ? 'supergroup' : 'group',
            title: (entity as any).title || '',
            username: (entity as any).username || undefined
          };
        } else {
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã
        }
        
        chats.push(chat);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      session.lastActivity = new Date();
      
      this.logger.log(`‚úÖ Retrieved ${chats.length} chats for session ${sessionId}`);
      
      return chats;
      
    } catch (error) {
      this.logger.error(`Failed to get chats for session ${sessionId}:`, error);
      throw new Error(`Failed to get user chats: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
   */
  async getChatHistory(sessionId: string, chatId: string, limit = 100): Promise<any[]> {
    try {
      this.logger.log(`üìú Getting chat history for session ${sessionId}, chat ${chatId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // GramJS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ FLOOD_WAIT –ø—Ä–æ–±–ª–µ–º
      const messages = await client.getMessages(chatId, { limit });
      
      const formattedMessages: any[] = [];
      
      for (const message of messages) {
        if (!message) continue;
        
        const formattedMessage = {
          id: message.id,
          message: message.message || '',
          date: message.date,
          out: message.out, // –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
          fromId: (message.fromId as any)?.userId || (message.fromId as any)?.chatId,
          peerId: (message.peerId as any)?.userId || (message.peerId as any)?.chatId,
          // –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
          media: message.media ? {
            type: (message.media as any)?.className || 'unknown',
            document: (message.media as any).document,
            photo: (message.media as any).photo
          } : undefined
        };
        
        formattedMessages.push(formattedMessage);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      session.lastActivity = new Date();
      
      this.logger.log(`‚úÖ Retrieved ${formattedMessages.length} messages for chat ${chatId}`);
      
      return formattedMessages;
      
    } catch (error) {
      this.logger.error(`Failed to get chat history for session ${sessionId}, chat ${chatId}:`, error);
      throw new Error(`Failed to get chat history: ${error.message}`);
    }
  }

  // ===============================
  // FILE METHODS  
  // ===============================

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
   */
  async sendFile(sessionId: string, chatId: string, file: Express.Multer.File, caption?: string): Promise<any> {
    try {
      this.logger.log(`üìé Sending file via session ${sessionId} to chat ${chatId}: ${file.originalname} (${file.size} bytes)`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // GramJS –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏)
      this.logger.log(`üìé Preparing file: ${file.originalname}, MIME: ${file.mimetype}, Size: ${file.size}`);
      
      const fs = await import('fs');
      const path = await import('path');
      const os = await import('os');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      const tempDir = os.tmpdir();
      const tempFilePath = path.join(tempDir, file.originalname);
      
      try {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        fs.writeFileSync(tempFilePath, file.buffer);
        this.logger.log(`üìÅ Temporary file created: ${tempFilePath}`);
        
        // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–æ–¥—Ö–æ–¥: CustomFile + Api.DocumentAttributeFilename 
        this.logger.log(`üîß Using CustomFile + DocumentAttributeFilename approach: ${file.originalname}`);
        
        const customFile = new CustomFile(
          file.originalname,  // fileName
          file.size,          // fileSize  
          tempFilePath,       // path (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É)
          file.buffer         // buffer
        );
        
        const result = await client.sendFile(chatId, {
          file: customFile,
          caption: caption,
          forceDocument: true,
          attributes: [new Api.DocumentAttributeFilename({ fileName: file.originalname })]
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
        try {
          if (fs.existsSync(tempFilePath)) {
            fs.unlinkSync(tempFilePath);
            this.logger.log(`üóëÔ∏è Temporary file deleted: ${tempFilePath}`);
          }
        } catch (cleanupError) {
          this.logger.warn(`Failed to cleanup temp file after success: ${cleanupError.message}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        session.lastActivity = new Date();
        
        this.logger.log(`‚úÖ File sent successfully via DocumentAttributeFilename: ${result.id}`);
        
        return {
          messageId: result.id,
          fileName: file.originalname,
          fileSize: file.size,
          date: result.date
        };
        
      } catch (fileError) {
        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        try {
          if (fs.existsSync(tempFilePath)) {
            fs.unlinkSync(tempFilePath);
          }
        } catch (cleanupError) {
          this.logger.warn(`Failed to cleanup temp file: ${cleanupError.message}`);
        }
        throw fileError;
      }
      
    } catch (error) {
      this.logger.error(`Failed to send file via session ${sessionId}:`, error);
      throw new Error(`File sending failed: ${error.message}`);
    }
  }

  /**
   * –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
   */
  async downloadFile(sessionId: string, chatId: string, messageId: string): Promise<Buffer & { contentType?: string; fileName?: string }> {
    try {
      this.logger.log(`üì• Downloading file from message ${messageId} in chat ${chatId} via session ${sessionId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messages = await client.getMessages(chatId, { ids: [parseInt(messageId)] });
      const message = messages[0];
      
      if (!message || !message.media) {
        throw new Error(`Message ${messageId} not found or has no media`);
      }
      
      // GramJS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª
      const buffer = await client.downloadMedia(message.media, {
        outputFile: undefined // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Buffer –≤–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
      session.lastActivity = new Date();
      
      let fileName = 'file';
      let contentType = 'application/octet-stream';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const mediaAny = message.media as any;
      if (mediaAny.document) {
        const doc = mediaAny.document;
        contentType = doc.mimeType || contentType;
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ GramJS
        if (doc.attributes) {
          this.logger.log(`üîç Document has ${doc.attributes.length} attributes`);
          
          for (let i = 0; i < doc.attributes.length; i++) {
            const attr = doc.attributes[i];
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.logger.log(`üîç Attribute ${i}:`, {
              className: attr.className,
              constructorName: attr.constructor?.name,
              _name: (attr as any)._name,
              hasFileName: !!(attr as any).fileName,
              keys: Object.keys(attr)
            });
            
            // –í GramJS —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å DocumentAttributeFilename –±–µ–∑ className
            if (attr.fileName || (attr.className && attr.className.includes('DocumentAttributeFilename'))) {
              fileName = attr.fileName || (attr as any).fileName;
              this.logger.log(`üìÑ Found filename: ${fileName}`);
              break;
            }
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ _name –∏ constructor.name
            if (attr._name === 'DocumentAttributeFilename' || attr.constructor?.name === 'DocumentAttributeFilename') {
              fileName = attr.fileName || (attr as any).fileName;
              this.logger.log(`üìÑ Found filename via _name: ${fileName}`);
              break;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ fileName –≤ –∞—Ç—Ä–∏–±—É—Ç–µ
            if ((attr as any).fileName) {
              fileName = (attr as any).fileName;
              this.logger.log(`üìÑ Found filename via direct property: ${fileName}`);
              break;
            }
          }
        }
        
        // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º MIME —Ç–∏–ø –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if (fileName === 'file' && contentType) {
          const extension = this.getExtensionFromMimeType(contentType);
          fileName = `document_${messageId}${extension}`;
        }
      } else if (mediaAny.photo) {
        fileName = `photo_${messageId}.jpg`;
        contentType = 'image/jpeg';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ buffer —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!buffer) {
        throw new Error('Failed to download file: buffer is empty');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –±—É—Ñ–µ—Ä—É
      const resultBuffer = buffer as Buffer & { contentType?: string; fileName?: string };
      resultBuffer.contentType = contentType;
      resultBuffer.fileName = fileName;
      
      this.logger.log(`‚úÖ File downloaded successfully: ${fileName} (${buffer.length} bytes)`);
      
      return resultBuffer;
      
    } catch (error) {
      this.logger.error(`Failed to download file from session ${sessionId}:`, error);
      throw new Error(`File download failed: ${error.message}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
   */
  private getExtensionFromMimeType(mimeType: string): string {
    const mimeMap: Record<string, string> = {
      'application/pdf': '.pdf',
      'application/msword': '.doc',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
      'application/vnd.ms-excel': '.xls',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': '.xlsx',
      'application/vnd.ms-powerpoint': '.ppt',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': '.pptx',
      'text/plain': '.txt',
      'text/csv': '.csv',
      'application/json': '.json',
      'application/xml': '.xml',
      'application/zip': '.zip',
      'application/x-rar-compressed': '.rar',
      'application/x-7z-compressed': '.7z',
      'image/jpeg': '.jpg',
      'image/png': '.png',
      'image/gif': '.gif',
      'image/webp': '.webp',
      'video/mp4': '.mp4',
      'video/avi': '.avi',
      'video/quicktime': '.mov',
      'audio/mpeg': '.mp3',
      'audio/wav': '.wav',
      'audio/ogg': '.ogg'
    };
    
    return mimeMap[mimeType] || '.bin';
  }

  // ===============================
  // REAL-TIME METHODS
  // ===============================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ–º Smart Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   * –≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ GramJS —Å–æ–±—ã—Ç–∏—è–º
   */
  private async startSmartPolling(sessionId: string): Promise<void> {
    try {
      this.logger.log(`üîÑ Starting Smart Polling for session ${sessionId}`);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.pollingIntervals.has(sessionId)) {
        clearInterval(this.pollingIntervals.get(sessionId));
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏
      if (!this.lastMessageIds.has(sessionId)) {
        this.lastMessageIds.set(sessionId, new Map<string, number>());
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      const interval = setInterval(async () => {
        try {
          await this.pollForNewMessages(sessionId);
        } catch (error) {
          this.logger.warn(`‚ö†Ô∏è Smart polling error for session ${sessionId}:`, error.message);
        }
      }, 3000);
      
      this.pollingIntervals.set(sessionId, interval);
      this.logger.log(`‚úÖ Smart Polling started for session ${sessionId}`);
      
    } catch (error) {
      this.logger.error(`Failed to start Smart Polling for session ${sessionId}:`, error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ (Smart Polling)
   */
  private async pollForNewMessages(sessionId: string): Promise<void> {
    try {
      const client = this.clients.get(sessionId);
      if (!client) return;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–µ—Ä–≤—ã–µ 10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö)
      const dialogs = await client.getDialogs({ limit: 10 });
      
      const sessionLastMessages = this.lastMessageIds.get(sessionId) || new Map();
      let hasNewMessages = false;
      
      for (const dialog of dialogs) {
        if (!dialog.entity) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ entity
        
        const chatId = dialog.entity.id.toString();
        const lastMessageId = dialog.message?.id || 0;
        const storedLastId = sessionLastMessages.get(chatId) || 0;
        
        if (lastMessageId > storedLastId) {
          // –ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
          const messages = await client.getMessages(dialog.entity, { 
            limit: 5,
            minId: storedLastId 
          });
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          for (const message of messages.reverse()) { // reverse –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            if (message.id > storedLastId) {
              await this.handleNewMessage(sessionId, { message });
              hasNewMessages = true;
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
          sessionLastMessages.set(chatId, lastMessageId);
        }
      }
      
      if (hasNewMessages) {
        this.logger.log(`üì® Processed new messages via Smart Polling for session ${sessionId}`);
      }
      
    } catch (error) {
      this.logger.warn(`Smart polling check failed for session ${sessionId}:`, error.message);
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ - Smart Polling
   */
  async startListening(sessionId: string): Promise<void> {
    try {
      this.logger.log(`üëÇ Starting real-time message listening for session: ${sessionId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Smart Polling –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      this.logger.log(`üîß CALLING startSmartPolling for session ${sessionId}`);
      await this.startSmartPolling(sessionId);
      
      this.logger.log(`‚úÖ Smart Polling started for session ${sessionId}`);
      
    } catch (error) {
      this.logger.error(`Failed to start listening for session ${sessionId}:`, error);
      throw error;
    }
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è WebSocket (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BigInt –≤ —Å—Ç—Ä–æ–∫–∏)
   */
  private serializeMediaForWebSocket(media: any): any {
    if (!media) return undefined;

    try {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫–∏
      const serialize = (obj: any): any => {
        if (obj === null || obj === undefined) return obj;
        if (typeof obj === 'bigint') return obj.toString();
        if (typeof obj === 'object') {
          if (Array.isArray(obj)) {
            return obj.map(serialize);
          }
          const result: any = {};
          for (const [key, value] of Object.entries(obj)) {
            result[key] = serialize(value);
          }
          return result;
        }
        return obj;
      };

      return {
        type: media.className || media.constructor?.name,
        className: media.className,
        photo: media.photo ? serialize(media.photo) : undefined,
        document: media.document ? serialize(media.document) : undefined
      };
    } catch (error) {
      this.logger.warn(`Failed to serialize media for WebSocket: ${error.message}`);
      return {
        type: media.className || media.constructor?.name,
        className: media.className
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø
   */
  private async handleNewMessage(sessionId: string, update: any): Promise<void> {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const eventType = update.className || update.constructor?.name || update._name || 'unknown';
      this.logger.log(`üîç Event received in session ${sessionId}: ${eventType}`);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
      const safeLogData = {
        messageId: update.message?.id,
        messageText: update.message?.message?.substring(0, 50),
        hasMessage: !!update.message
      };
      this.logger.log(`üîç Event safe data:`, JSON.stringify(safeLogData));
      
      // –£–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π update —Å message
      if (!update.message) {
        this.logger.log(`‚ö†Ô∏è Skipping event ${eventType} - no message property`);
        return;
      }
      
      const message = update.message;
      if (!message) {
        return;
      }
      
      this.logger.log(`üì® New message received in session ${sessionId}: ${message.id}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞
      const peerId = message.peerId as any;
      const chatId = (peerId?.userId || peerId?.chatId)?.toString();
      if (!chatId) {
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π!
      const telegramUpdate = {
        type: 'new_message' as const,
        sessionId: sessionId,
        chatId: chatId,
        data: {
          messageId: message.id,
          text: message.message || '',
          message: message.message || '',
          date: message.date,
          isIncoming: !message.out,
          isOutgoing: message.out,
          fromId: (message.fromId as any)?.userId || (message.fromId as any)?.chatId,
          peerId: (message.peerId as any)?.userId || (message.peerId as any)?.chatId,
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ frontend
          media: message.media ? this.serializeMediaForWebSocket(message.media) : undefined
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WebSocket Gateway
      this.webSocketGateway.sendTelegramUpdate(telegramUpdate);
      
      this.logger.log(`‚úÖ WebSocket notification sent for message ${message.id}`);
      
    } catch (error) {
      this.logger.error(`Error handling new message in session ${sessionId}:`, error);
    }
  }

  // ===============================
  // WEBHOOK –ú–ï–¢–û–î–´
  // ===============================

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Smart Polling –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  async setupWebhook(sessionId: string, webhookUrl: string): Promise<void> {
    try {
      this.logger.log(`üéß Setting up direct GramJS events for session ${sessionId}`);
      
      const client = await this.getClient(sessionId);
      const session = this.sessions.get(sessionId);
      if (!session?.isAuthenticated) {
        throw new Error(`Session ${sessionId} is not authenticated`);
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º Smart Polling –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.pollingIntervals.has(sessionId)) {
        clearInterval(this.pollingIntervals.get(sessionId));
        this.pollingIntervals.delete(sessionId);
        this.logger.log(`üõë Smart Polling disabled for session ${sessionId}`);
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è GramJS
      const { NewMessage } = await import('telegram/events');
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
      const directEventHandler = async (update: any) => {
        try {
          this.logger.log(`üì® Direct GramJS event received for session ${sessionId}`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
          await this.handleNewMessage(sessionId, update);
          
        } catch (error) {
          this.logger.error(`Direct event handling failed for session ${sessionId}:`, error.message);
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      client.addEventHandler(directEventHandler, new NewMessage({
        incoming: true,   // –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        outgoing: false   // –ò—Å–∫–ª—é—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      }));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      session.metadata = {
        ...session.metadata,
        eventsEnabled: true,
        webhookUrl: webhookUrl
      };

      this.logger.log(`‚úÖ Direct GramJS events configured for session ${sessionId}`);
      
    } catch (error) {
      this.logger.error(`Failed to setup direct events for session ${sessionId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π webhook –≤—ã–∑–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä—è–º—ã–µ GramJS —Å–æ–±—ã—Ç–∏—è, –Ω–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  async handleWebhookUpdate(sessionId: string, update: any): Promise<void> {
    try {
      this.logger.log(`üîó External webhook call received for session ${sessionId} (now using direct events)`);
      
      // –ü—Ä—è–º—ã–µ GramJS —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
      this.logger.log(`‚ÑπÔ∏è Direct GramJS events handle messages automatically, external webhook not needed`);
      
    } catch (error) {
      this.logger.error(`Webhook compatibility handler failed for session ${sessionId}:`, error);
      throw error;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏)
   */
  private async optimizedPollForNewMessages(sessionId: string): Promise<void> {
    try {
      const client = this.clients.get(sessionId);
      if (!client) return;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (–Ω–µ 100!)
      const dialogs = await client.getDialogs({ limit: 5 });
      
      const sessionLastMessages = this.lastMessageIds.get(sessionId) || new Map();
      let hasNewMessages = false;
      
      for (const dialog of dialogs) {
        if (!(dialog as any).entity) continue;
        
        const chatId = String((dialog as any).entity.id || '');
        const lastMessageId = (dialog as any).message?.id || 0;
        const storedLastId = sessionLastMessages.get(chatId) || 0;
        
        if (lastMessageId > storedLastId) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 3)
          const messages = await client.getMessages((dialog as any).entity, { 
            limit: 3,
            minId: storedLastId 
          });
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          for (const message of messages.reverse()) {
            if (message.id > storedLastId) {
              await this.handleNewMessage(sessionId, { message });
              hasNewMessages = true;
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
          sessionLastMessages.set(chatId, lastMessageId);
        }
      }
      
      if (hasNewMessages) {
        this.logger.log(`üì® Found new messages via optimized polling for session ${sessionId}`);
      }
      
    } catch (error) {
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ FLOOD_WAIT
    }
  }
}